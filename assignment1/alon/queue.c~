#include "types.h"
#include "user.h"  
#include "queue.h"

struct queue* queue_add_element(struct queue* s, const int i)
{
  struct q_element* p = malloc( 1 * sizeof(*p) );
 
  if( p == 0 )
    {
      //fprintf(stderr, "IN %s, %s: malloc() failed\n", __FILE__, "queue_add");
      return s; 
    }
 
  p->num = i;
  p->next = 0;
 
 
  if( s == 0 )
    {
      //printf("Queue not initialized\n");
      free(p);
      return s;
    }
  else if( s->head == 0 && s->tail == 0 )
    {
      /* printf("Empty queue, adding p->num: %d\n\n", p->num);  */
      s->head = s->tail = p;
      return s;
    }
  else if( s->head == 0 || s->tail == 0 )
    {
      //fprintf(stderr, "There is something seriously wrong with your assignment of head/tail to the queue\n");
      free(p);
      return 0;
    }
  else
    {
      /* printf("List not empty, adding element to tail\n"); */
      s->tail->next = p;
      s->tail = p;
    }
 
  return s;
}
 
 
 
/* This is a queue and it is FIFO, so we will always remove the first element */
struct queue* queue_remove_element( struct queue* s )
{
  struct q_element* h = 0;
  struct q_element* p = 0;
 
  if( s == 0 )
    {
      //printf("List is empty\n");
      return s;
    }
  else if( s->head == 0 && s->tail == 0 )
    {
      //printf("Well, List is empty\n");
      return s;
    }
  else if( s->head == 0 || s->tail == 0 )
    {
      //printf("There is something seriously wrong with your queue\n");
     // printf("One of the head/tail is empty while other is not \n");
      return s;
    }
 
  h = s->head;
  p = h->next;
  free(h);
  s->head = p;
  if( s->head == 0 )  s->tail = s->head;   /* The element tail was pointing to is free(), so we need an update */
 
  return s;
}
   
 
/* ---------------------- small helper fucntions ---------------------------------- */
struct queue* queue_free( struct queue* s )
{
  while( s->head )
    {
      queue_remove_element(s);
    }
 
  return s;
}
 
struct queue* queue_new(void)
{
  struct queue* p = malloc( 1 * sizeof(*p));
 
  if( p == 0 )
    {
      //fprintf(stderr, "LINE: %d, malloc() failed\n", __LINE__);
    }
 
  p->head = p->tail = 0;
   
  return p;
}
 
 
/*void queue_print( const struct queue* ps )
{
  struct q_element* p = NULL;
 
  if( ps )
    {
      for( p = ps->head; p; p = p->next )
    {
      queue_print_element(p);
    }
    }
 
  printf("------------------\n");
}*/
 
 
/*void queue_print_element(const struct q_element* p )
{
  if( p ) 
    {
      printf("Num = %d\n", p->num);
    }
  else
    {
      printf("Can not print NULL struct \n");
    }
}*/